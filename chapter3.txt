Chapter 3

What does the following function definition do?
     add(X, Y) when is_integer(X), is_integer(Y) -> X + Y.

add/2 will add X and Y and return their sum, but only if they are both integers.

----

How does *add/2* know if X and Y are integers?

add/2 uses two guard expressions to perform checks on the variables. 

----

True or false: add/2 uses a guard

True,
  add/2 uses a guard composed of two guard expressions separated by a comma.

----

What are the two guard expressions used in add/2

is_integer(X) and is_integer(Y)

----

What does the guard expression is_integer(X) do?

is_integer(X) is a BIF(built in function) that checks if the variable X is an integer and will return true if it is and false if it is not

----

True or false: the guard when is_integer(X), is_integer(Y) will pass when
  X = 1
  Y = 2

True,
  because both X and Y are integers.

----

True or false: the guard when is_integer(X), is_integer(Y) will pass when
  X = 1
  Y = spy

False,
  a guard will not pass unless all of it's guard expressions are true, and spy is not an integer.

----

True or false: add/2 uses a guard sequence

False,
  a guard sequence is series of guards or guard expressions separated with semicolons. Unlike a guard, which requires all guard expressions to be true, a guard sequence will succeed if at least one guard expression is true.

----

What is the function of a guard?

A guard is a way to do a boolean test. In the case of add/2, the guard is being used to make sure that valid arguments are being supplied by the caller.

----

How do we add a guard to a function definition?

We can add guards to a function definition by using the key word "when" followed by the guard or guard sequence that we would like to perform. 

----

What does the following function definition do?

     print_lists_and_tuples(X) when is_list(X); is_tuple(X) ->
       io:format("Lists and tuples are awesome!~n").

If the function receives a list or a tuple as an argument it will print 'Lists and tuples are awesome!'.

----

True or False: print_lists_and_tuples/1 uses a guard sequence?

True,
  it uses the guard sequence is_list(X); is_tuple(X)

----

What is the difference in behavior between a guard and a guard sequence?

For a guard to be true, all expressions within that guard must be true, similar to the logical operator AND.  For a guard sequence to be true, at least one expression within the sequence must be true, similar to the logical operator OR.

----

What is the difference in syntax between a guard and a guard sequence?

If a guard is composed of more than one expression, the expressions are separated by a comma.  The expression in a guard sequence are separated by semi-colons.

--

What is the result of print_lists_and_tuples(X) when X is
  [foo, bar, baz]

'Lists and tuples are awesome!'

----

Why did it evaluate in that way?

Because the value of X was a list, which passed the guard sequence since it contained the guard expression is_list(X).

--

What is the result of print_lists_and_tuples(X) when X is
  {foo, bar, baz}

'Lists and tuples are awesome!'

----

Why did it evaluate that way?

Because the value of X was a tuple, which passed the guard sequence since it contained the guard expression is_tuple(X).

----

What is the result of print_lists_and_tuples(X) when X is
  erlang

You will get an exception that looks similar to this:

** exception error: no function clause matching 
  little_erlanger:print_lists_and_tuples(erlang)

----

Why did we get an exception error?

Because erlang is an atom, and fails to pass either of the expressions in the guard sequence.

----

Why didn't we specifically handle this error scenario within the function?

This function only accepts lists or tuples, and it is appropriate that it should throw an exception if the wrong data type is sent to it.

----

Let's rewrite the function to use a guard instead of a guard sequence like this:

     print_lists_and_tuples(X) when is_list(X), is_tuple(X) ->
      io:format("Lists and tuples are awesome!~n").

----

What was the only change required to change from a guard sequence to a single guard with two guard expressions?

We changed the semi-colon between the two guard expressions to a comma.

--

Now what will be the result of print_lists_and_tuples(X) when X is:
  [foo, bar, baz]

An error that looks similar to:

** exception error: no function clause matching 
  little_erlanger:print_lists_and_tuples_2([foo,bar,baz])

----

Why did this revision of print_lists_and_tuples() produce an error when passed a list?

Because while it passed the guard expression is_list(X) it failed the second guard expression is_tuple(X).  To pass the guard it would have needed to pass both guard expressions, which is impossible as the argument cannot be both a tuple and a list.

%%          sub-question: does 2nd guard in sequence even get evaluated?

----

True or false: Guards can only be used to test arguments to functions?

False,
  a guard can be used anywhere that an expression is allowed. 

----

True or false: Any expression can be used as a guard expression?

False,
  Only a limited set of Erlang expressions are valid for use as guard expressions.  This restriction guarantees the guard expressions is side effect free.

%% This is a good idea but not sure how to include it in yet. Any thoughts Justin?

%% Might include a note on the list of these
%% [BW] adding list of these per the Erlang documentation:
%%	* the atom true,
%%	* other constants (terms and bound variables), all regarded as false,
%%	* calls to the BIFs specified in Figure 1,
%%	* term comparisons,
%%	* arithmetic expressions,
%%	* boolean expressions, and
%%	* short-circuit expressions (andalso/orelse).

%% Figure 1.
%%	Type Test BIFs.
%%	is_atom/1
%%	is_binary/1
%%	is_bitstring/1
%%	is_float/1
%%	is_function/1
%%	is_function/2
%%	is_integer/1
%%	is_list/1
%%	is_number/1
%%	is_pid/1
%%	is_port/1
%%	is_record/2
%%	is_record/3
%%	is_reference/1
%%	is_tuple/1

----

Can we use a guard in an if statement?

Yes,
  we can use a guard anywhere that an expression is allowed.

----

Answer the following questions using this if statement.

  if
    is_list(Foo) ->
      io:format("Foo is a list~n");
    is_atom(Foo) ->
      io:format("Foo is an atom~n");
    true ->
      io:format("I don't know what Foo is~n")
  end.

----

Does this if statement contain a single guard composed of three guard expressions, a guard sequence composed of three individual guards or is it three individual guards?

The if statement uses three individual guards that act like a guard sequence but contain three different possible return values whereas a guard sequence will only have one return
value if any of the guards succeed.

----

What is the first question asked in the if statement?

The first question asked is is_list(Foo). 

----

What will happen if Foo is a list?

is_list will return true if Foo is a list and false if Foo is not a list. If it is a list then io:format will print out
"Foo is a list"

----

What will happen is Foo is not a list?

A second question will be asked.

----

What is the second question asked in the if statement?

The second question is the guard is_atom(Foo). 

----

What will happen if Foo is an atom?

is_atom will return true if Foo is an atom and false if Foo is not an atom. If it is an atom then io:format will print out
"Foo is an atom"

----

What will happen if Foo is not an atom?

A third and final question is asked

----

What is the third and final question asked by the if statement?

true,
  while it's not really a question, the final guard is simply the atom true which will make sure that the if statement evaluates and returns something even if all guards return false. true is used as a catch all and should always be the last guard used %% in a guard sequence.

----

What is the value returned from the if statement when Foo is equal to
 [happy, happy, joy, joy].

"Foo is a list",
  because Foo would hold a list as it's value.

----

What is the value returned from the if statement when Foo is equal to
  5.

"I don't know what Foo is",
  Foo is not an atom or a list so the last guard, true, is the catch all and will return it's value.

----

What would happen if we don't have any guards return true in an if statement?

An exception will be thrown

----

What is an exception?

An exception being raised is a way for your application to tell you when something has gone wrong. 

----

Would an exception be raised if we passed an atom as an argument to our add/2 function?

Yes,
  an exception would be raised that looks something like this

  ** exception error: no function clause matching 
                    little_erlanger:add(3,four)

----

True or false: This exception is telling us that it could not find a function definition that matched our arguments?

True,
  The exception raised is the "no function clause matching little_erlanger:add(3,four)."

----

Why couldn't the function match the arguments provided?

The guard is_integer returns false since four is not an integer

----

What is four?

four is an atom

----

What happens when is_integer checks four?

An exception is raised

----

Can we rewrite the add/2 function to work with these arguments?

Yes,
  let's start by making add/2 do simple addition on numbers 0-9 and the second number can be spelled out instead of an integer

----

Our new add/2, now with words

add_with_words(First, Second) ->
  case Second of
    zero -> First + 0;
    one  -> First + 1;
    two  -> First + 2;
    three -> First + 3;
    four -> First + 4;
    five -> First + 5;
    six  -> First + 6;
    seven -> First + 7;
    eight -> First + 8;
    nine -> First + 9;
    Second when is_number(Second) -> First + Second
  end.


Will our function raise an exception if we use the arguments (3, four) now?

No,
  our function can handle zero-nine spelled out if they are the second argument and any real numbers as the first or second argument.

----

What new conditional statement did we use to accomplish writing this function?

A case statement

----

How many guards are used in the case statement?

One

----

What is the guard used in the case statement?

is_number(Second)

----

What are the other expressions?

zero - nine are pattern matching clauses

----

How is Second being used at the beginning of this expression found within the case statement? 
  Second when is_number(Second) -> First + Second

Like zero-nine, this is also a patern matching clause.

----

When will this pattern clause match?

When no other pattern (zero-nine) has matched, then this pattern will always match.

----

Why will this pattern always match?

Because it is testing to see if the value bound to the variable Second matches itself, which it always will.

--

%% Questions I'd have:
%%
%% If and when seem very similar.  What are differences?  When should you use one over the other?
