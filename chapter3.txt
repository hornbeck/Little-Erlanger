Chapter 3

What does the following function definition do?
     add(X, Y) when is_integer(X), is_integer(Y) -> X + Y.

add/2 will only add together X and Y if they are both integers.

%% I'd word it:
%% add/2 will add X and Y and return their sum, but only if they are both integers.
%% to me the, "but only if" is kind of like the English equivalent of the guard
----

How does *add/2* know if X and Y are integers?

add/2 uses two guard expressions to perform checks on the variables. A guard is a way to test an argument being passed to a function.  In the case of add/2, the guard being used is the BIF(built in function) is_integer which will return true if the variable is an integer and false if it is not. We can add guards to function definitions by using the key word "when" followed by the guard or guard sequence that we would like to perform.

%% Thoughts: Perhaps break the "A guard is..." part out into it's own little box and leave the answer concise.  Also, thinking that is_integer should already be covered (maybe it was and I forgot?).  Let the reader focus on the guard function, without a detour into what a BIF is and is_integer does.  This could be covered back where you do is_atom(X).
%%
%% Example rewording:
%% add/2 uses a guard.  The guard uses the BIF is_integer to check that both X and Y are integers.  We can add guards to function definitions by using the key word "when" followed by a guard or guard sequence.
%%
%% Vocabulary: Guard. A guard is a way to test arguments.  A guard can be made up of one or more guard expressions.  A guard is only true if all of it's guard expressions are true.



----

True or false: add/2 uses a guard

True,
  add/2 uses a guard which is a series of guard expressions that must all evaluate true for the guard to succeed.

%% Reword: add/2 uses a guard composed of two guard expressions separated by a comma.  The first guard expression  (is_integer(X)) checks that the variable X is an integer. The second guard expression (is_integer(Y)) does the same for variable Y.

----

True or false: add/2 uses a guard sequence

False,
  a guard sequence is single guard or series of guard expressions separated with semicolons. A guard sequence will succeed if at least one guard expression is true.

%% a guard sequence is series of guards, not guard expressions, and there must be at least two to be a sequence... if I understand right
%% Reword: a guard sequence is two or more guards separated by semicolons.  A guard sequence will succeed if at least one guard is true.

%% Example: function with a guard with 2 guard expressions: when both are true

%% Example: function with a guard with 2 guard expressions: when both are false

%% Example: function with a guard with 2 guard expressions: when one is false

%% Example: function with a sequence of 2 guards: when both are true
%%          sub-question: does 2nd guard in sequence even get evaluated?

%% Example: function with a sequence of 2 guards: when both are false

%% Example: function with a sequence of 2 guards: when first is false, 2nd true

----

True or false: Guards can only be used to test arguments to functions?

False,
  a guard can be used anywhere that an expression is allowed. 

----

Can we use a guard in an if statement?

Yes,
  we can use a guard anywhere that an expression is allowed.

----

Answer the following questions using this if statement.

  if
    is_list(Foo) ->
      io:format("Foo is a list~n");
    is_atom(Foo) ->
      io:format("Foo is an atom~n");
    true ->
      io:format("I don't know what Foo is~n")
  end.

----

%% Does this if statement contain a single guard composed of three guard expressions, or is it a guard sequence composed of three individual guards?  Answer...


What is the first question asked in the if statement?

The first question asked is is_list(Foo). is_list will return true if Foo is a list and false if Foo is not a list. If it is a list then io:format will print out
"Foo is a list"

%% Might break into two parts question / answers.  "What is the first question asked in the if statement?", and "What will it do if Foo is a list?"

----

What is the second question asked in the if statement?

The second question is the guard is_atom(Foo). is_atom is just like is_list except that it checks to see if Foo is an atom or not and will print out "Foo is an atom" if the guard returns true.

%% Again, while repetitive, I think it is worth it to itemize each of these separately: "What is question?", "What will it do if..." just to highlight that guard affects what gets executed

----

%% Why is it important that it is a guard sequence, and not a single guard?  If it was a single guard no way it could ever be true as is_list and is_atom can't both be true for any single value Foo.  And all guard expressions must be true for a guard to be true.  Wording can probably be improved.


What is the third and final question asked by the if statement?

true,
  while it's not really a question, the final guard is simply the atom true which will make sure that the if statement evaluates and returns something even if all guards return false. true is used as a catch all and should always be the last guard used %% in a guard sequence.

----

What is the value returned from the if statement when Foo is equal to
 [happy, happy, joy, joy].

"Foo is a list",
  because Foo would hold a list as it's value.

----

What is the value returned from the if statement when Foo is equal to
  5.

"I don't know what Foo is",
  Foo is not an atom or a list so the last guard, true, is the catch all and will return it's value.

----

What happens if we don't have any guards return true in the if statement?

%% Should this be: "What would happen if we don't have any guards return true in an if statement", otherwise it could sound like we are still talking about the same if statement being used previously which has the default true guard to catch all.

An exception will be thrown

----

What is an exception?

An exception being raised is a way for your application to tell you when something has gone wrong. 

----

Would an exception be raised if we passed an atom as an argument to our add/2 function?

Yes,
  an exception would be raised that looks something like this

  ** exception error: no function clause matching 
                    little_erlanger:add(3,four)

----

True or false: This exception is telling us that it could not find a function definition that matched our arguments?

True,
  The exception raised is the "no function clause matching little_erlanger:add(3,four)."

----

%% Why couldn't it find a function definition that matched our arguments?  Guards check for is_integer, four is not an integer.

%% What is four?  It's an atom.

Can we rewrite the add/2 function to work with these arguments?

Yes,
  let's start by making add/2 do simple addition on numbers 0-9 and the second number can be spelled out instead of an integer

----

Our new add/2, now with words

add_with_words(First, Second) ->
  case Second of
    zero -> First + 0;
    one  -> First + 1;
    two  -> First + 2;
    three -> First + 3;
    four -> First + 4;
    five -> First + 5;
    six  -> First + 6;
    seven -> First + 7;
    eight -> First + 8;
    nine -> First + 9;
    Second when is_number(Second) -> First + Second
  end.


Will our function raise an exception if we use the arguments (3, four) now?

No,
  our function can handle zero-nine spelled out if they are the second argument and any real numbers as the first or second argument.

----

What new conditional statement did we use to accomplish writing this function?

A case statement

----

%% How many guards are used in the case statement?  One.  The only guard is when is_number(Second).  zero - nine and Second are pattern matches.

%% Does the case statement use a guard sequence?  No, it uses a single guard which has one guard expression.

%% Questions I'd have:
%%
%% If and when seem very similar.  What are differences?  When should you use one over the other?
