The Little ErlangerIs it true that this is an atom?  atom.Yes, because atom is a string of charactersbeginning with the letter a.---Is it true that this is an atom?  turkey.Yes, because turkey is a string of charactersbeginning with a letter---Is it true that this is an atom?  u.Yes, because u is a string of one character,which is a letter.---Is it true that this is an atom?  '*abc$'.Yes, because surrounding any character stringwith single quotes makes it an atom.---Is it true that this is a list?  [atom].Yes, because [atom] is an atom enclosed bysquare brackets---Is it true that this is a list?  [atom, turkey, org].Yes, because it is a collection of atoms,separated by commas and enclosed by square brackets.---Is it true that this is a list?  [atom, turkey], org.No, because these are two separate expressions not enclosed by square brackets.  The first one is a list containingtwo atoms, and the second one is an atom.---Is it true that this is a list?  [[atom, turkey], org].Yes, because the two expressions are now enclosedby square brackets.---Is it true that this is an expression?  xyz.Yes, because all atoms are expressions.---Is it true that this is an expression?  [x,y,z].Yes, because it is a list.---Is it true that this is an expression?  [[x,y],z].Yes, because all lists are expressions.---Is it true that this is a list?  [how,are,you,doing,so,far].Yes, because it is a collection of expressionsenclosed by square brackets.---How many expressions are in the list  [how,are,you,doing,so,far].Six,  how, are, you, doing, so, far#Note: Would it be worth wording "Six, the atoms:"---Is it true that this is a list?  [[[how], are], [[you], [doing, so]], far].Yes, because it is a collection of expressionsenclosed by square brackets.---How many expressions are in the list  [[[how], are], [[you], [doing, so]], far].and what are they?Three,[[how], are], [[you], [doing, so]], and far#Note: It says three, but lists four---Is it true that this is a list?   [].Yes, square brackets by themselves create anempty list.---Is it true that this is an atom?  [].No, because [] is just a list.---Is it true that this is a list?  [[],[],[],[]].Yes, because it is a collection ofempty lists.---#Note: Something feels a little off on this section.  I wonder if using othervariables in addition to Head would help clarify that it's the '|' not 'Head' which invokes the operation.What is the [Head|_] of lwhere l is the argument  [a,b,c].a, because a is the first atom ofthis list.---What is the [Head|_] of l wherel is   [[a,b,c], x,y,z].[a,b,c], because [a,b,c] is the first expression of this non-empty list.---What is the [Head|_] of lwhere l is  hotdog.No answer, you cannot ask for the head ofan atom.---What is the [Head|_] of l where l is  [].No answer, You cannot ask for the head of an empty list.---The Law of [Head|_]The pattern matching expression [Head|_] will only work for non-empty lists.  ---What is the [Head|_] of l where l is  [[[hotdogs]], ['and'], [pickle], relish].[[hotdogs]], read as: "The list of the list of hotdogs"[[hotdogs]] is the first expression of l.#Note: I think an important element is missed here.  The original text includesan example omitted, which shows (car l) teaching how to invoke the function.An equivalent [Head|_] = l would help show the application of what to this pointhas been conceptual.---What is the [[Head|_]|_] of l  where [[[hotdogs]], ['and']].[hotdogs]#Note: To me, one of the key differences between (car l) and [H|_] = l is that car will return the value, while in erlang it is assigned to H.  Perhaps thetext can be revised more along the lines of:What is the value of Head for [Head|_] of l where l is ...---What is the [_|Tail] of l where l is  [a,b,c].[b,c], because [b,c] is the list l without [Head|_].---What is the [_|Tail] of l where l is  [[a,b,c], x,y,z].[x,y,z]---What is the [_|Tail] of a where a is 	hotdogs.No answer,	You cannot ask for the Tail of an atom.---What is the [_|Tail] of l where l is 	[].No answer,	You cannot ask for the Tail of an empty list.---The Law of [_|Tail]The pattern matching expression [_|Tail] will only work for non-empty lists.  TheTail of any non-empty list is always another list.#Note: previously [atom] was given as an example of listUnlike car & cdr, any [H|T] function fails with a bad match on a single term list.Perhaps def needs to be changed to list with 2 or more terms.Might also be good to include an example(s) for this unique behavior---#Note: Not sure here, but "What is the Head of ..." shows proper vocalizingof the code, but wonder if it again might cause a misunderstanding about whatpart 'Head' is playing.  Might, "What is the value of Head ..." be moreexplicit?What is the Head of [_|[Head|Tail]] where l is 	[[b], [x,y], [[c]]].[x,y],	because [[x,y], [[c]]] is the [_|Tail] of l, and [x,y] is the [Head|_] of that Tail.---What is the value of Tail in [_|[_|Tail]] where l is	[[b], [x,y], [[c]]].[[[c]]],	because [[x,y], [[c]]] is the [_|Tail], and [[[c]]] is the [_|Tail] of that Tail.---What is Tail in [[_|Tail]|_] where l is	[a, [b, [c]], d].No answer,	since [_|Tail] is the Head of l and the Head of [a, [b, [c]], d]	is an atom, and [_|Tail] does not take an atom as an argument.---What does [Head|_] match against?It will match against any non-empty list.#Note: same as before, list of >2 terms / expressions---What does [_|Tail] match against?It will match against any non-empty list.#Note: see aboveThe writing below is for a future chapterIs it true that this is an atom?  1492.No, because numbers are not atoms, they are eitherintegers or floats.---Is it true that this is an integer?  42.Yes, because it is a string of numbers.---Is it true that this is an integer?  $A.Yes, because a $ sign in front of a letterrepresents the ASCII value of that letter.---Is it true that this is a float?  2.3.Yes, because there is a decimal between thetwo numbers.---Is it true that this is an integer?  16#1f.Yes, because you can set the base of thenumber by seperating it with a # sign.---Is it true that this is an integer?  2#101.Yes, because we set the base as 2 and gave the number 101 which would convert to 5.---Is it true that this is a string?  "hello, joe".Yes, because a string of characters in double quotes is a string.---